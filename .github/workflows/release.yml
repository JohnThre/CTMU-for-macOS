name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release'
        required: true
        type: string

jobs:
  build:
    runs-on: macos-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest tests/ -v

    - name: Extract version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Build Python packages
      run: |
        python -m build

    - name: Create checksums
      run: |
        cd dist
        shasum -a 256 *.whl *.tar.gz > checksums.txt

    - name: Import GPG key (if available)
      if: secrets.GPG_PRIVATE_KEY != ''
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --quick-add-key $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2) rsa4096 sign
      continue-on-error: true

    - name: Build macOS release packages (if GPG available)
      if: secrets.GPG_PRIVATE_KEY != ''
      run: |
        chmod +x build_release.sh
        ./build_release.sh
      continue-on-error: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          dist/*.pkg
          dist/*.dmg
          dist/*.asc
          dist/checksums.txt
          dist/CTMU-*-checksums.txt*
        body: |
          ## CTMU v${{ steps.get_version.outputs.version }}

          ### Installation

          **Python Package (PyPI):**
          ```bash
          pip install ctmu
          ```

          **macOS PKG Installer:**
          Download `CTMU-${{ steps.get_version.outputs.version }}.pkg` and install via Finder

          **macOS DMG:**
          Download `CTMU-${{ steps.get_version.outputs.version }}.dmg` and drag to Applications folder

          ### Verification

          GPG signatures are provided for all packages. Verify with:
          ```bash
          gpg --verify CTMU-${{ steps.get_version.outputs.version }}.pkg.asc
          ```

          SHA256 checksums are available in `checksums.txt`

          ### What's Changed

          See commit history for detailed changes.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: build
    runs-on: macos-latest
    environment: production
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python packages
      run: |
        python -m build

    - name: Publish to PyPI
      if: secrets.PYPI_API_TOKEN != ''
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*.whl dist/*.tar.gz
      continue-on-error: true
